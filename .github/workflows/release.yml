name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release Assets
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-linux
            ext: ""
          - os: macos-latest
            target: x86_64-macos
            ext: ""
          - os: macos-latest
            target: aarch64-macos
            ext: ""
          - os: windows-latest
            target: x86_64-windows
            ext: ".exe"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0

      - name: Build for ${{ matrix.target }}
        run: |
          zig build -Doptimize=ReleaseFast -Dtarget=${{ matrix.target }}
          
      - name: Create archive
        run: |
          mkdir -p dist
          cp zig-out/bin/Guillotine${{ matrix.ext }} dist/
          cd dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../guillotine-${{ matrix.target }}.zip *
          else
            tar -czf ../guillotine-${{ matrix.target }}.tar.gz *
          fi
        shell: bash

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./guillotine-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: guillotine-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}

  build-wasm:
    name: Build WASM Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup development environment
        uses: ./.github/actions/setup

      - name: Build WASM
        run: zig build wasm

      - name: Create WASM archive
        run: |
          cd zig-out/wasm
          tar -czf ../../guillotine-wasm.tar.gz *

      - name: Upload WASM Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./guillotine-wasm.tar.gz
          asset_name: guillotine-wasm.tar.gz
          asset_content_type: application/gzip